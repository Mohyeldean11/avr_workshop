
7SEG_2022.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000428  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e5b  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000712  00000000  00000000  000013d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006e0  00000000  00000000  00001ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  000021c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000425  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009c7  00000000  00000000  000026c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	aa 00       	.word	0x00aa	; ????
  56:	b0 00       	.word	0x00b0	; ????
  58:	bb 00       	.word	0x00bb	; ????
  5a:	c6 00       	.word	0x00c6	; ????
  5c:	d1 00       	.word	0x00d1	; ????
  5e:	dc 00       	.word	0x00dc	; ????
  60:	e7 00       	.word	0x00e7	; ????
  62:	f2 00       	.word	0x00f2	; ????
  64:	fd 00       	.word	0x00fd	; ????
  66:	08 01       	movw	r0, r16

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 3f 01 	call	0x27e	; 0x27e <main>
  78:	0c 94 12 02 	jmp	0x424	; 0x424 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_7SEG_ENABLE>:




void _7SEG_ENABLE(u8_t segment_number,u8_t segment_point)
{
  80:	cf 93       	push	r28
  82:	c6 2f       	mov	r28, r22
	if (segment_number==LEFT_SEGMENT)
  84:	81 30       	cpi	r24, 0x01	; 1
  86:	51 f4       	brne	.+20     	; 0x9c <_7SEG_ENABLE+0x1c>
	{
		
		MDIO_SETPIN_STATUS(_7SEG_ENABLE_PORT,_7SEG_ENABLE1,OUTPUT);
  88:	40 e0       	ldi	r20, 0x00	; 0
  8a:	64 e0       	ldi	r22, 0x04	; 4
  8c:	0e 94 67 01 	call	0x2ce	; 0x2ce <MDIO_SETPIN_STATUS>
		MDIO_SETPIN_VALUE(_7SEG_ENABLE_PORT,_7SEG_ENABLE1,HIGH);	
  90:	41 e0       	ldi	r20, 0x01	; 1
  92:	64 e0       	ldi	r22, 0x04	; 4
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <_7SEG_ENABLE+0x34>
	}
	else if (segment_number==RIGHT_SEGMENT)
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	51 f4       	brne	.+20     	; 0xb4 <_7SEG_ENABLE+0x34>
	{
		
		MDIO_SETPIN_STATUS(_7SEG_ENABLE_PORT,_7SEG_ENABLE2,OUTPUT);
  a0:	40 e0       	ldi	r20, 0x00	; 0
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	0e 94 67 01 	call	0x2ce	; 0x2ce <MDIO_SETPIN_STATUS>
		MDIO_SETPIN_VALUE(_7SEG_ENABLE_PORT,_7SEG_ENABLE2,HIGH);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
	}	
	
	if (segment_point==SEGMENT_POINT)
  b4:	c1 30       	cpi	r28, 0x01	; 1
  b6:	59 f4       	brne	.+22     	; 0xce <_7SEG_ENABLE+0x4e>
	{
		MDIO_SETPIN_STATUS(_7SEG_ENABLE_PORT,_7SEG_DPOINT,OUTPUT);
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	68 e0       	ldi	r22, 0x08	; 8
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 67 01 	call	0x2ce	; 0x2ce <MDIO_SETPIN_STATUS>
		MDIO_SETPIN_VALUE(_7SEG_ENABLE_PORT,_7SEG_DPOINT,HIGH);
  c2:	41 e0       	ldi	r20, 0x01	; 1
  c4:	68 e0       	ldi	r22, 0x08	; 8
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
  cc:	0c c0       	rjmp	.+24     	; 0xe6 <_7SEG_ENABLE+0x66>
	}
	else if(segment_point==NO_SEGMENT_POINT)
  ce:	c2 30       	cpi	r28, 0x02	; 2
  d0:	51 f4       	brne	.+20     	; 0xe6 <_7SEG_ENABLE+0x66>
	{
		MDIO_SETPIN_STATUS(_7SEG_ENABLE_PORT,_7SEG_DPOINT,OUTPUT);
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	68 e0       	ldi	r22, 0x08	; 8
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	0e 94 67 01 	call	0x2ce	; 0x2ce <MDIO_SETPIN_STATUS>
		MDIO_SETPIN_VALUE(_7SEG_ENABLE_PORT,_7SEG_DPOINT,LOW);		
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	68 e0       	ldi	r22, 0x08	; 8
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
	}
}
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <_7SEG_DISABLE>:

void _7SEG_DISABLE(u8_t segment_number)
{
	if (segment_number==LEFT_SEGMENT)
  ea:	81 30       	cpi	r24, 0x01	; 1
  ec:	51 f4       	brne	.+20     	; 0x102 <_7SEG_DISABLE+0x18>
	{
		MDIO_SETPIN_STATUS(_7SEG_ENABLE_PORT,_7SEG_ENABLE1,OUTPUT);
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	64 e0       	ldi	r22, 0x04	; 4
  f2:	0e 94 67 01 	call	0x2ce	; 0x2ce <MDIO_SETPIN_STATUS>
		MDIO_SETPIN_VALUE(_7SEG_ENABLE_PORT,_7SEG_ENABLE1,LOW);	
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	64 e0       	ldi	r22, 0x04	; 4
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
 100:	08 95       	ret
	}
	else if (segment_number==RIGHT_SEGMENT)
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	51 f4       	brne	.+20     	; 0x11a <_7SEG_DISABLE+0x30>
	{
		
		MDIO_SETPIN_STATUS(_7SEG_ENABLE_PORT,_7SEG_ENABLE2,OUTPUT);
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	62 e0       	ldi	r22, 0x02	; 2
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	0e 94 67 01 	call	0x2ce	; 0x2ce <MDIO_SETPIN_STATUS>
		MDIO_SETPIN_VALUE(_7SEG_ENABLE_PORT,_7SEG_ENABLE2,LOW);
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	62 e0       	ldi	r22, 0x02	; 2
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
 11a:	08 95       	ret

0000011c <_7SEG_SEND_DATA>:
	}	
}

void _7SEG_SEND_DATA(u8_t segment_number,u8_t seg_data)
{
 11c:	cf 93       	push	r28
 11e:	c6 2f       	mov	r28, r22
	if (segment_number==LEFT_SEGMENT)
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	31 f4       	brne	.+12     	; 0x130 <_7SEG_SEND_DATA+0x14>
	{
		MDIO_SETPIN_STATUS(_7SEG_DATA_PORT,PIN4|PIN5|PIN6|PIN7,OUTPUT);
 124:	40 e0       	ldi	r20, 0x00	; 0
 126:	60 ef       	ldi	r22, 0xF0	; 240
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 67 01 	call	0x2ce	; 0x2ce <MDIO_SETPIN_STATUS>
 12e:	07 c0       	rjmp	.+14     	; 0x13e <_7SEG_SEND_DATA+0x22>
	}
	else if (segment_number==RIGHT_SEGMENT)
 130:	82 30       	cpi	r24, 0x02	; 2
 132:	29 f4       	brne	.+10     	; 0x13e <_7SEG_SEND_DATA+0x22>
	{
		MDIO_SETPIN_STATUS(_7SEG_DATA_PORT,PIN4|PIN5|PIN6|PIN7,OUTPUT);
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	60 ef       	ldi	r22, 0xF0	; 240
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 67 01 	call	0x2ce	; 0x2ce <MDIO_SETPIN_STATUS>
	}
	switch(seg_data)
 13e:	8c 2f       	mov	r24, r28
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	8a 30       	cpi	r24, 0x0A	; 10
 144:	91 05       	cpc	r25, r1
 146:	08 f0       	brcs	.+2      	; 0x14a <_7SEG_SEND_DATA+0x2e>
 148:	6d c0       	rjmp	.+218    	; 0x224 <_7SEG_SEND_DATA+0x108>
 14a:	fc 01       	movw	r30, r24
 14c:	e6 5d       	subi	r30, 0xD6	; 214
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	0c 94 0c 02 	jmp	0x418	; 0x418 <__tablejump2__>
	{
		case seg_0 :
		{
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN4|PIN5|PIN6|PIN7,LOW);
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	60 ef       	ldi	r22, 0xF0	; 240
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			break;
 15e:	62 c0       	rjmp	.+196    	; 0x224 <_7SEG_SEND_DATA+0x108>
		}
		case seg_1 :
		{
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN5|PIN6|PIN7,LOW);
 160:	40 e0       	ldi	r20, 0x00	; 0
 162:	60 ee       	ldi	r22, 0xE0	; 224
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN4,HIGH);
 16a:	41 e0       	ldi	r20, 0x01	; 1
 16c:	60 e1       	ldi	r22, 0x10	; 16
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			break;
 174:	57 c0       	rjmp	.+174    	; 0x224 <_7SEG_SEND_DATA+0x108>
		}
		case seg_2 :
		{
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN4|PIN6|PIN7,LOW);
 176:	40 e0       	ldi	r20, 0x00	; 0
 178:	60 ed       	ldi	r22, 0xD0	; 208
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN5,HIGH);
 180:	41 e0       	ldi	r20, 0x01	; 1
 182:	60 e2       	ldi	r22, 0x20	; 32
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			break;
 18a:	4c c0       	rjmp	.+152    	; 0x224 <_7SEG_SEND_DATA+0x108>
		}
		case seg_3 :
		{
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN6|PIN7,LOW);
 18c:	40 e0       	ldi	r20, 0x00	; 0
 18e:	60 ec       	ldi	r22, 0xC0	; 192
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN4|PIN5,HIGH);
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	60 e3       	ldi	r22, 0x30	; 48
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			break;
 1a0:	41 c0       	rjmp	.+130    	; 0x224 <_7SEG_SEND_DATA+0x108>
		}
		case seg_4 :
		{
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN4|PIN5|PIN7,LOW);
 1a2:	40 e0       	ldi	r20, 0x00	; 0
 1a4:	60 eb       	ldi	r22, 0xB0	; 176
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN6,HIGH);
 1ac:	41 e0       	ldi	r20, 0x01	; 1
 1ae:	60 e4       	ldi	r22, 0x40	; 64
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			break;
 1b6:	36 c0       	rjmp	.+108    	; 0x224 <_7SEG_SEND_DATA+0x108>
		}
		case seg_5 :
		{
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN5|PIN7,LOW);
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	60 ea       	ldi	r22, 0xA0	; 160
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN6|PIN4,HIGH);
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	60 e5       	ldi	r22, 0x50	; 80
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			break;
 1cc:	2b c0       	rjmp	.+86     	; 0x224 <_7SEG_SEND_DATA+0x108>
		}
		case seg_6 :
		{
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN4|PIN7,LOW);
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	60 e9       	ldi	r22, 0x90	; 144
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN5|PIN6,HIGH);
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	60 e6       	ldi	r22, 0x60	; 96
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			break;
 1e2:	20 c0       	rjmp	.+64     	; 0x224 <_7SEG_SEND_DATA+0x108>
		}
		case seg_7 :
		{
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN7,LOW);
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	60 e8       	ldi	r22, 0x80	; 128
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN4|PIN5|PIN6,HIGH);
 1ee:	41 e0       	ldi	r20, 0x01	; 1
 1f0:	60 e7       	ldi	r22, 0x70	; 112
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			break;
 1f8:	15 c0       	rjmp	.+42     	; 0x224 <_7SEG_SEND_DATA+0x108>
		}
		case seg_8 :
		{
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN4|PIN5|PIN6,LOW);
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	60 e7       	ldi	r22, 0x70	; 112
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN7,HIGH);
 204:	41 e0       	ldi	r20, 0x01	; 1
 206:	60 e8       	ldi	r22, 0x80	; 128
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			break;
 20e:	0a c0       	rjmp	.+20     	; 0x224 <_7SEG_SEND_DATA+0x108>
		}		
		case seg_9 :
		{
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN5|PIN6,LOW);
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	60 e6       	ldi	r22, 0x60	; 96
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
			MDIO_SETPIN_VALUE(_7SEG_DATA_PORT,PIN4|PIN7,HIGH);
 21a:	41 e0       	ldi	r20, 0x01	; 1
 21c:	60 e9       	ldi	r22, 0x90	; 144
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
		{
			/*do nothing*/
			break;
		}
	}
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <alarm>:
		alarm();
    }
}
void alarm()
{
	_7SEG_ENABLE(LEFT_SEGMENT,SEGMENT_POINT);
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 40 00 	call	0x80	; 0x80 <_7SEG_ENABLE>
	_7SEG_ENABLE(RIGHT_SEGMENT,SEGMENT_POINT);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	82 e0       	ldi	r24, 0x02	; 2
 234:	0e 94 40 00 	call	0x80	; 0x80 <_7SEG_ENABLE>
	MDIO_SETPIN_VALUE(PORTA,PIN3,HIGH);		
 238:	41 e0       	ldi	r20, 0x01	; 1
 23a:	68 e0       	ldi	r22, 0x08	; 8
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	81 ee       	ldi	r24, 0xE1	; 225
 246:	94 e0       	ldi	r25, 0x04	; 4
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <alarm+0x20>
 250:	00 c0       	rjmp	.+0      	; 0x252 <alarm+0x2a>
 252:	00 00       	nop
	_delay_ms(100);
	_7SEG_DISABLE(LEFT_SEGMENT);
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e 94 75 00 	call	0xea	; 0xea <_7SEG_DISABLE>
	_7SEG_DISABLE(RIGHT_SEGMENT);
 25a:	82 e0       	ldi	r24, 0x02	; 2
 25c:	0e 94 75 00 	call	0xea	; 0xea <_7SEG_DISABLE>
	MDIO_SETPIN_VALUE(PORTA,PIN3,LOW);
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	68 e0       	ldi	r22, 0x08	; 8
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MDIO_SETPIN_VALUE>
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	81 ee       	ldi	r24, 0xE1	; 225
 26e:	94 e0       	ldi	r25, 0x04	; 4
 270:	21 50       	subi	r18, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <alarm+0x48>
 278:	00 c0       	rjmp	.+0      	; 0x27a <alarm+0x52>
 27a:	00 00       	nop
 27c:	08 95       	ret

0000027e <main>:
#include "util/delay.h"

void alarm(void);
int main(void)
{
	MDIO_SETPIN_STATUS(PORTA,PIN3,OUTPUT);
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	68 e0       	ldi	r22, 0x08	; 8
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 67 01 	call	0x2ce	; 0x2ce <MDIO_SETPIN_STATUS>
	int var=0;
	_7SEG_ENABLE(LEFT_SEGMENT,SEGMENT_POINT);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	0e 94 40 00 	call	0x80	; 0x80 <_7SEG_ENABLE>
	_7SEG_ENABLE(RIGHT_SEGMENT,SEGMENT_POINT);
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	82 e0       	ldi	r24, 0x02	; 2
 294:	0e 94 40 00 	call	0x80	; 0x80 <_7SEG_ENABLE>
	_7SEG_SEND_DATA(RIGHT_SEGMENT,var);	
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	0e 94 8e 00 	call	0x11c	; 0x11c <_7SEG_SEND_DATA>

void alarm(void);
int main(void)
{
	MDIO_SETPIN_STATUS(PORTA,PIN3,OUTPUT);
	int var=0;
 2a0:	c0 e0       	ldi	r28, 0x00	; 0
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
	_7SEG_ENABLE(LEFT_SEGMENT,SEGMENT_POINT);
	_7SEG_ENABLE(RIGHT_SEGMENT,SEGMENT_POINT);
	_7SEG_SEND_DATA(RIGHT_SEGMENT,var);	
	while(var<10)
 2a4:	0e c0       	rjmp	.+28     	; 0x2c2 <main+0x44>
	{
	_7SEG_SEND_DATA(LEFT_SEGMENT,var);
 2a6:	6c 2f       	mov	r22, r28
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 8e 00 	call	0x11c	; 0x11c <_7SEG_SEND_DATA>
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
 2b0:	83 ed       	ldi	r24, 0xD3	; 211
 2b2:	90 e3       	ldi	r25, 0x30	; 48
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	80 40       	sbci	r24, 0x00	; 0
 2b8:	90 40       	sbci	r25, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0x36>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x40>
 2be:	00 00       	nop
	_delay_ms(1000);
	var++;
 2c0:	21 96       	adiw	r28, 0x01	; 1
	MDIO_SETPIN_STATUS(PORTA,PIN3,OUTPUT);
	int var=0;
	_7SEG_ENABLE(LEFT_SEGMENT,SEGMENT_POINT);
	_7SEG_ENABLE(RIGHT_SEGMENT,SEGMENT_POINT);
	_7SEG_SEND_DATA(RIGHT_SEGMENT,var);	
	while(var<10)
 2c2:	ca 30       	cpi	r28, 0x0A	; 10
 2c4:	d1 05       	cpc	r29, r1
 2c6:	7c f3       	brlt	.-34     	; 0x2a6 <main+0x28>
	}

    /* Replace with your application code */
    while (1) 
    {
		alarm();
 2c8:	0e 94 14 01 	call	0x228	; 0x228 <alarm>
 2cc:	fd cf       	rjmp	.-6      	; 0x2c8 <main+0x4a>

000002ce <MDIO_SETPIN_STATUS>:
/*FUNCTIONS DEFINITIONS*/

void MDIO_SETPIN_STATUS(u8_t au8_port, u8_t au8_pin, u8_t au8_status)
{

    switch (au8_port)
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	f9 f0       	breq	.+62     	; 0x310 <MDIO_SETPIN_STATUS+0x42>
 2d2:	30 f0       	brcs	.+12     	; 0x2e0 <MDIO_SETPIN_STATUS+0x12>
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	a1 f1       	breq	.+104    	; 0x340 <MDIO_SETPIN_STATUS+0x72>
 2d8:	83 30       	cpi	r24, 0x03	; 3
 2da:	09 f4       	brne	.+2      	; 0x2de <MDIO_SETPIN_STATUS+0x10>
 2dc:	49 c0       	rjmp	.+146    	; 0x370 <MDIO_SETPIN_STATUS+0xa2>
 2de:	08 95       	ret
    {
    /*incase of port A*/
    case PORTA:
    {
        /*GETTING THE STATUS*/
        switch (au8_status)
 2e0:	41 30       	cpi	r20, 0x01	; 1
 2e2:	41 f0       	breq	.+16     	; 0x2f4 <MDIO_SETPIN_STATUS+0x26>
 2e4:	18 f0       	brcs	.+6      	; 0x2ec <MDIO_SETPIN_STATUS+0x1e>
 2e6:	42 30       	cpi	r20, 0x02	; 2
 2e8:	51 f0       	breq	.+20     	; 0x2fe <MDIO_SETPIN_STATUS+0x30>
 2ea:	08 95       	ret
        {
            /*INCASE OF OUTPUT*/
        case OUTPUT:
            MDIO_DDRA |= au8_pin; /*SETTING THE VALUE OF THE PINS IN DDRA BY 1*/
 2ec:	8a b3       	in	r24, 0x1a	; 26
 2ee:	68 2b       	or	r22, r24
 2f0:	6a bb       	out	0x1a, r22	; 26

            break;
 2f2:	08 95       	ret

            /*INCASE OF INPUT FLOAT*/
        case INPUT_FLOAT:

            MDIO_DDRA &= ~au8_pin; /*SETTING THE VALUE OF THE PINS IN DDRA BY 0*/
 2f4:	8a b3       	in	r24, 0x1a	; 26
 2f6:	60 95       	com	r22
 2f8:	68 23       	and	r22, r24
 2fa:	6a bb       	out	0x1a, r22	; 26

            break;
 2fc:	08 95       	ret

            /*INCASE OF INPUT PULLUP*/
        case INPUT_PULLUP:

            MDIO_DDRA &= ~au8_pin; /*SETTING THE VALUE OF THE PINS IN PINS BY 0*/
 2fe:	8a b3       	in	r24, 0x1a	; 26
 300:	96 2f       	mov	r25, r22
 302:	90 95       	com	r25
 304:	89 23       	and	r24, r25
 306:	8a bb       	out	0x1a, r24	; 26

            MDIO_PORTA |= au8_pin; /*Set the specified pins to 1 in PORT*/
 308:	8b b3       	in	r24, 0x1b	; 27
 30a:	68 2b       	or	r22, r24
 30c:	6b bb       	out	0x1b, r22	; 27
            break;
 30e:	08 95       	ret
    }

    case PORTB:
    {
        /*GETTING THE STATUS*/
        switch (au8_status)
 310:	41 30       	cpi	r20, 0x01	; 1
 312:	41 f0       	breq	.+16     	; 0x324 <MDIO_SETPIN_STATUS+0x56>
 314:	18 f0       	brcs	.+6      	; 0x31c <MDIO_SETPIN_STATUS+0x4e>
 316:	42 30       	cpi	r20, 0x02	; 2
 318:	51 f0       	breq	.+20     	; 0x32e <MDIO_SETPIN_STATUS+0x60>
 31a:	08 95       	ret
        {
            /*INCASE OF OUTPUT*/
        case OUTPUT:
            MDIO_DDRB |= au8_pin; /*SETTING THE VALUE OF THE PINS IN DDRA BY 1*/
 31c:	87 b3       	in	r24, 0x17	; 23
 31e:	68 2b       	or	r22, r24
 320:	67 bb       	out	0x17, r22	; 23

            break;
 322:	08 95       	ret

            /*INCASE OF INPUT FLOAT*/
        case INPUT_FLOAT:

            MDIO_DDRB &= ~au8_pin; /*SETTING THE VALUE OF THE PINS IN DDRA BY 0*/
 324:	87 b3       	in	r24, 0x17	; 23
 326:	60 95       	com	r22
 328:	68 23       	and	r22, r24
 32a:	67 bb       	out	0x17, r22	; 23

            break;
 32c:	08 95       	ret

            /*INCASE OF INPUT PULLUP*/
        case INPUT_PULLUP:

            MDIO_DDRB &= ~au8_pin; /*SETTING THE VALUE OF THE PINS IN PINS BY 0*/
 32e:	87 b3       	in	r24, 0x17	; 23
 330:	96 2f       	mov	r25, r22
 332:	90 95       	com	r25
 334:	89 23       	and	r24, r25
 336:	87 bb       	out	0x17, r24	; 23

            MDIO_PORTB |= au8_pin; /*Set the specified pins to 1 in PORT*/
 338:	88 b3       	in	r24, 0x18	; 24
 33a:	68 2b       	or	r22, r24
 33c:	68 bb       	out	0x18, r22	; 24
            break;
 33e:	08 95       	ret
    }
        /*incase of port C*/
    case PORTC:
    {
        /*GETTING THE STATUS*/
        switch (au8_status)
 340:	41 30       	cpi	r20, 0x01	; 1
 342:	41 f0       	breq	.+16     	; 0x354 <MDIO_SETPIN_STATUS+0x86>
 344:	18 f0       	brcs	.+6      	; 0x34c <MDIO_SETPIN_STATUS+0x7e>
 346:	42 30       	cpi	r20, 0x02	; 2
 348:	51 f0       	breq	.+20     	; 0x35e <MDIO_SETPIN_STATUS+0x90>
 34a:	08 95       	ret
        {
            /*INCASE OF OUTPUT*/
        case OUTPUT:
            MDIO_DDRC |= au8_pin; /*SETTING THE VALUE OF THE PINS IN DDRA BY 1*/
 34c:	84 b3       	in	r24, 0x14	; 20
 34e:	68 2b       	or	r22, r24
 350:	64 bb       	out	0x14, r22	; 20

            break;
 352:	08 95       	ret

            /*INCASE OF INPUT FLOAT*/
        case INPUT_FLOAT:

            MDIO_DDRC &= ~au8_pin; /*SETTING THE VALUE OF THE PINS IN DDRA BY 0*/
 354:	84 b3       	in	r24, 0x14	; 20
 356:	60 95       	com	r22
 358:	68 23       	and	r22, r24
 35a:	64 bb       	out	0x14, r22	; 20

            break;
 35c:	08 95       	ret

            /*INCASE OF INPUT PULLUP*/
        case INPUT_PULLUP:

            MDIO_DDRC &= ~au8_pin; /*SETTING THE VALUE OF THE PINS IN PINS BY 0*/
 35e:	84 b3       	in	r24, 0x14	; 20
 360:	96 2f       	mov	r25, r22
 362:	90 95       	com	r25
 364:	89 23       	and	r24, r25
 366:	84 bb       	out	0x14, r24	; 20

            MDIO_PORTC |= au8_pin; /*Set the specified pins to 1 in PORT*/
 368:	85 b3       	in	r24, 0x15	; 21
 36a:	68 2b       	or	r22, r24
 36c:	65 bb       	out	0x15, r22	; 21

            break;
 36e:	08 95       	ret
    }
        /*incase of port D*/
    case PORTD:
    {
        /*GETTING THE STATUS*/
        switch (au8_status)
 370:	41 30       	cpi	r20, 0x01	; 1
 372:	41 f0       	breq	.+16     	; 0x384 <MDIO_SETPIN_STATUS+0xb6>
 374:	18 f0       	brcs	.+6      	; 0x37c <MDIO_SETPIN_STATUS+0xae>
 376:	42 30       	cpi	r20, 0x02	; 2
 378:	51 f0       	breq	.+20     	; 0x38e <MDIO_SETPIN_STATUS+0xc0>
 37a:	08 95       	ret
        {
            /*INCASE OF OUTPUT*/
        case OUTPUT:
            MDIO_DDRD |= au8_pin; /*SETTING THE VALUE OF THE PINS IN DDRA BY 1*/
 37c:	81 b3       	in	r24, 0x11	; 17
 37e:	68 2b       	or	r22, r24
 380:	61 bb       	out	0x11, r22	; 17

            break;
 382:	08 95       	ret

            /*INCASE OF INPUT FLOAT*/
        case INPUT_FLOAT:

            MDIO_DDRD &= ~au8_pin; /*SETTING THE VALUE OF THE PINS IN DDRA BY 0*/
 384:	81 b3       	in	r24, 0x11	; 17
 386:	60 95       	com	r22
 388:	68 23       	and	r22, r24
 38a:	61 bb       	out	0x11, r22	; 17

            break;
 38c:	08 95       	ret

            /*INCASE OF INPUT PULLUP*/
        case INPUT_PULLUP:

            MDIO_DDRD &= ~au8_pin; /*SETTING THE VALUE OF THE PINS IN PINS BY 0*/
 38e:	81 b3       	in	r24, 0x11	; 17
 390:	96 2f       	mov	r25, r22
 392:	90 95       	com	r25
 394:	89 23       	and	r24, r25
 396:	81 bb       	out	0x11, r24	; 17

            MDIO_PORTD |= au8_pin; /*Set the specified pins to 1 in PORT*/
 398:	82 b3       	in	r24, 0x12	; 18
 39a:	68 2b       	or	r22, r24
 39c:	62 bb       	out	0x12, r22	; 18
 39e:	08 95       	ret

000003a0 <MDIO_SETPIN_VALUE>:
        return;
    }
}
void MDIO_SETPIN_VALUE(u8_t au8_port, u8_t au8_pin, u8_t au8_value)
{
    switch (au8_port)
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	99 f0       	breq	.+38     	; 0x3ca <MDIO_SETPIN_VALUE+0x2a>
 3a4:	28 f0       	brcs	.+10     	; 0x3b0 <MDIO_SETPIN_VALUE+0x10>
 3a6:	82 30       	cpi	r24, 0x02	; 2
 3a8:	e9 f0       	breq	.+58     	; 0x3e4 <MDIO_SETPIN_VALUE+0x44>
 3aa:	83 30       	cpi	r24, 0x03	; 3
 3ac:	41 f1       	breq	.+80     	; 0x3fe <MDIO_SETPIN_VALUE+0x5e>
 3ae:	08 95       	ret
    {
    /*incase of portA*/
    case PORTA:
    {
        switch (au8_value)
 3b0:	44 23       	and	r20, r20
 3b2:	31 f0       	breq	.+12     	; 0x3c0 <MDIO_SETPIN_VALUE+0x20>
 3b4:	41 30       	cpi	r20, 0x01	; 1
 3b6:	79 f5       	brne	.+94     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
        {
        /*INCASE OF HIGH VALUE*/
        case HIGH:
            MDIO_PORTA |= au8_pin; /*SETTING THE PINS TO 1*/
 3b8:	8b b3       	in	r24, 0x1b	; 27
 3ba:	68 2b       	or	r22, r24
 3bc:	6b bb       	out	0x1b, r22	; 27

            break;
 3be:	08 95       	ret

        /*INCASE OF LOW VALUE*/
        case LOW:
            MDIO_PORTA &= ~au8_pin; /*SETTING THE PINS TO 0*/
 3c0:	8b b3       	in	r24, 0x1b	; 27
 3c2:	60 95       	com	r22
 3c4:	68 23       	and	r22, r24
 3c6:	6b bb       	out	0x1b, r22	; 27

            break;
 3c8:	08 95       	ret
        break;
    }
        /*incase of portB*/
    case PORTB:
    {
        switch (au8_value)
 3ca:	44 23       	and	r20, r20
 3cc:	31 f0       	breq	.+12     	; 0x3da <MDIO_SETPIN_VALUE+0x3a>
 3ce:	41 30       	cpi	r20, 0x01	; 1
 3d0:	11 f5       	brne	.+68     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
        {
        /*INCASE OF HIGH VALUE*/
        case HIGH:
            MDIO_PORTB |= au8_pin; /*SETTING THE PINS TO 1*/
 3d2:	88 b3       	in	r24, 0x18	; 24
 3d4:	68 2b       	or	r22, r24
 3d6:	68 bb       	out	0x18, r22	; 24

            break;
 3d8:	08 95       	ret

        /*INCASE OF LOW VALUE*/
        case LOW:
            MDIO_PORTB &= ~au8_pin; /*SETTING THE PINS TO 0*/
 3da:	88 b3       	in	r24, 0x18	; 24
 3dc:	60 95       	com	r22
 3de:	68 23       	and	r22, r24
 3e0:	68 bb       	out	0x18, r22	; 24

            break;
 3e2:	08 95       	ret
        break;
    }
        /*incase of portC*/
    case PORTC:
    {
        switch (au8_value)
 3e4:	44 23       	and	r20, r20
 3e6:	31 f0       	breq	.+12     	; 0x3f4 <MDIO_SETPIN_VALUE+0x54>
 3e8:	41 30       	cpi	r20, 0x01	; 1
 3ea:	a9 f4       	brne	.+42     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
        {
        /*INCASE OF HIGH VALUE*/
        case HIGH:
            MDIO_PORTC |= au8_pin; /*SETTING THE PINS TO 1*/
 3ec:	85 b3       	in	r24, 0x15	; 21
 3ee:	68 2b       	or	r22, r24
 3f0:	65 bb       	out	0x15, r22	; 21

            break;
 3f2:	08 95       	ret

        /*INCASE OF LOW VALUE*/
        case LOW:
            MDIO_PORTC &= ~au8_pin; /*SETTING THE PINS TO 0*/
 3f4:	85 b3       	in	r24, 0x15	; 21
 3f6:	60 95       	com	r22
 3f8:	68 23       	and	r22, r24
 3fa:	65 bb       	out	0x15, r22	; 21

            break;
 3fc:	08 95       	ret
        break;
    }
        /*incase of portD*/
    case PORTD:
    {
        switch (au8_value)
 3fe:	44 23       	and	r20, r20
 400:	31 f0       	breq	.+12     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 402:	41 30       	cpi	r20, 0x01	; 1
 404:	41 f4       	brne	.+16     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
        {
        /*INCASE OF HIGH VALUE*/
        case HIGH:
            MDIO_PORTD |= au8_pin; /*SETTING THE PINS TO 1*/
 406:	82 b3       	in	r24, 0x12	; 18
 408:	68 2b       	or	r22, r24
 40a:	62 bb       	out	0x12, r22	; 18

            break;
 40c:	08 95       	ret

        /*INCASE OF LOW VALUE*/
        case LOW:
            MDIO_PORTD &= ~au8_pin; /*SETTING THE PINS TO 0*/
 40e:	82 b3       	in	r24, 0x12	; 18
 410:	60 95       	com	r22
 412:	68 23       	and	r22, r24
 414:	62 bb       	out	0x12, r22	; 18
 416:	08 95       	ret

00000418 <__tablejump2__>:
 418:	ee 0f       	add	r30, r30
 41a:	ff 1f       	adc	r31, r31
 41c:	05 90       	lpm	r0, Z+
 41e:	f4 91       	lpm	r31, Z
 420:	e0 2d       	mov	r30, r0
 422:	09 94       	ijmp

00000424 <_exit>:
 424:	f8 94       	cli

00000426 <__stop_program>:
 426:	ff cf       	rjmp	.-2      	; 0x426 <__stop_program>
