
EXTI_2022.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000042a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  0000042a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000042a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a09  00000000  00000000  00000548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000693  00000000  00000000  00000f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000603  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e4  00000000  00000000  00001be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000448  00000000  00000000  00001dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a3b  00000000  00000000  00002214  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002c4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b8 00 	jmp	0x170	; 0x170 <__vector_1>
   8:	0c 94 df 00 	jmp	0x1be	; 0x1be <__vector_2>
   c:	0c 94 06 01 	jmp	0x20c	; 0x20c <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 37 01 	call	0x26e	; 0x26e <main>
  74:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <exti_init>:
		break;
	}

	case EXTI_PIN2:
	{
		CLEAR_BIT(EXTI_GICR, 5); // DISABLING THE INTERRUPT SIGNAL 2 BY SETTING GICR TO 0
  7c:	9f b7       	in	r25, 0x3f	; 63
  7e:	90 68       	ori	r25, 0x80	; 128
  80:	9f bf       	out	0x3f, r25	; 63
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	99 f1       	breq	.+102    	; 0xec <exti_init+0x70>
  86:	20 f0       	brcs	.+8      	; 0x90 <exti_init+0x14>
  88:	82 30       	cpi	r24, 0x02	; 2
  8a:	09 f4       	brne	.+2      	; 0x8e <exti_init+0x12>
  8c:	5d c0       	rjmp	.+186    	; 0x148 <exti_init+0xcc>
  8e:	08 95       	ret
  90:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <gp_int0_isr+0x1>
  94:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <gp_int0_isr>
  98:	8b b7       	in	r24, 0x3b	; 59
  9a:	80 64       	ori	r24, 0x40	; 64
  9c:	8b bf       	out	0x3b, r24	; 59
  9e:	62 30       	cpi	r22, 0x02	; 2
  a0:	81 f0       	breq	.+32     	; 0xc2 <exti_init+0x46>
  a2:	18 f4       	brcc	.+6      	; 0xaa <exti_init+0x2e>
  a4:	61 30       	cpi	r22, 0x01	; 1
  a6:	31 f0       	breq	.+12     	; 0xb4 <exti_init+0x38>
  a8:	08 95       	ret
  aa:	63 30       	cpi	r22, 0x03	; 3
  ac:	89 f0       	breq	.+34     	; 0xd0 <exti_init+0x54>
  ae:	64 30       	cpi	r22, 0x04	; 4
  b0:	b1 f0       	breq	.+44     	; 0xde <exti_init+0x62>
  b2:	08 95       	ret
  b4:	85 b7       	in	r24, 0x35	; 53
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	85 bf       	out	0x35, r24	; 53
  ba:	85 b7       	in	r24, 0x35	; 53
  bc:	8d 7f       	andi	r24, 0xFD	; 253
  be:	85 bf       	out	0x35, r24	; 53
  c0:	08 95       	ret
  c2:	85 b7       	in	r24, 0x35	; 53
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	85 bf       	out	0x35, r24	; 53
  c8:	85 b7       	in	r24, 0x35	; 53
  ca:	8d 7f       	andi	r24, 0xFD	; 253
  cc:	85 bf       	out	0x35, r24	; 53
  ce:	08 95       	ret
  d0:	85 b7       	in	r24, 0x35	; 53
  d2:	8e 7f       	andi	r24, 0xFE	; 254
  d4:	85 bf       	out	0x35, r24	; 53
  d6:	85 b7       	in	r24, 0x35	; 53
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	85 bf       	out	0x35, r24	; 53
  dc:	08 95       	ret
  de:	85 b7       	in	r24, 0x35	; 53
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	85 bf       	out	0x35, r24	; 53
  e4:	85 b7       	in	r24, 0x35	; 53
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	85 bf       	out	0x35, r24	; 53
  ea:	08 95       	ret
  ec:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  f0:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__DATA_REGION_ORIGIN__>
  f4:	8b b7       	in	r24, 0x3b	; 59
  f6:	80 68       	ori	r24, 0x80	; 128
  f8:	8b bf       	out	0x3b, r24	; 59
  fa:	62 30       	cpi	r22, 0x02	; 2
  fc:	81 f0       	breq	.+32     	; 0x11e <exti_init+0xa2>
  fe:	18 f4       	brcc	.+6      	; 0x106 <exti_init+0x8a>
 100:	61 30       	cpi	r22, 0x01	; 1
 102:	31 f0       	breq	.+12     	; 0x110 <exti_init+0x94>
 104:	08 95       	ret
 106:	63 30       	cpi	r22, 0x03	; 3
 108:	89 f0       	breq	.+34     	; 0x12c <exti_init+0xb0>
 10a:	64 30       	cpi	r22, 0x04	; 4
 10c:	b1 f0       	breq	.+44     	; 0x13a <exti_init+0xbe>
 10e:	08 95       	ret
 110:	85 b7       	in	r24, 0x35	; 53
 112:	8b 7f       	andi	r24, 0xFB	; 251
 114:	85 bf       	out	0x35, r24	; 53
 116:	85 b7       	in	r24, 0x35	; 53
 118:	87 7f       	andi	r24, 0xF7	; 247
 11a:	85 bf       	out	0x35, r24	; 53
 11c:	08 95       	ret
 11e:	85 b7       	in	r24, 0x35	; 53
 120:	84 60       	ori	r24, 0x04	; 4
 122:	85 bf       	out	0x35, r24	; 53
 124:	85 b7       	in	r24, 0x35	; 53
 126:	87 7f       	andi	r24, 0xF7	; 247
 128:	85 bf       	out	0x35, r24	; 53
 12a:	08 95       	ret
 12c:	85 b7       	in	r24, 0x35	; 53
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	85 bf       	out	0x35, r24	; 53
 132:	85 b7       	in	r24, 0x35	; 53
 134:	88 60       	ori	r24, 0x08	; 8
 136:	85 bf       	out	0x35, r24	; 53
 138:	08 95       	ret
 13a:	85 b7       	in	r24, 0x35	; 53
 13c:	84 60       	ori	r24, 0x04	; 4
 13e:	85 bf       	out	0x35, r24	; 53
 140:	85 b7       	in	r24, 0x35	; 53
 142:	88 60       	ori	r24, 0x08	; 8
 144:	85 bf       	out	0x35, r24	; 53
 146:	08 95       	ret
 148:	50 93 65 00 	sts	0x0065, r21	; 0x800065 <gp_int2_isr+0x1>
 14c:	40 93 64 00 	sts	0x0064, r20	; 0x800064 <gp_int2_isr>
 150:	8b b7       	in	r24, 0x3b	; 59
 152:	80 62       	ori	r24, 0x20	; 32
 154:	8b bf       	out	0x3b, r24	; 59
 156:	63 30       	cpi	r22, 0x03	; 3
 158:	19 f0       	breq	.+6      	; 0x160 <exti_init+0xe4>
 15a:	64 30       	cpi	r22, 0x04	; 4
 15c:	29 f0       	breq	.+10     	; 0x168 <exti_init+0xec>
 15e:	08 95       	ret
 160:	84 b7       	in	r24, 0x34	; 52
 162:	8f 7b       	andi	r24, 0xBF	; 191
 164:	84 bf       	out	0x34, r24	; 52
 166:	08 95       	ret
 168:	84 b7       	in	r24, 0x34	; 52
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	84 bf       	out	0x34, r24	; 52
 16e:	08 95       	ret

00000170 <__vector_1>:
/*					ISRS                                                */
/************************************************************************/

/*INT0 VECTOR ISR*/
ISR(INT0_vect)
{
 170:	1f 92       	push	r1
 172:	0f 92       	push	r0
 174:	0f b6       	in	r0, 0x3f	; 63
 176:	0f 92       	push	r0
 178:	11 24       	eor	r1, r1
 17a:	2f 93       	push	r18
 17c:	3f 93       	push	r19
 17e:	4f 93       	push	r20
 180:	5f 93       	push	r21
 182:	6f 93       	push	r22
 184:	7f 93       	push	r23
 186:	8f 93       	push	r24
 188:	9f 93       	push	r25
 18a:	af 93       	push	r26
 18c:	bf 93       	push	r27
 18e:	ef 93       	push	r30
 190:	ff 93       	push	r31
	/*CALLING THE APPLICATION FUNCTION*/
	gp_int0_isr();
 192:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <gp_int0_isr>
 196:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <gp_int0_isr+0x1>
 19a:	09 95       	icall
}
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	bf 91       	pop	r27
 1a2:	af 91       	pop	r26
 1a4:	9f 91       	pop	r25
 1a6:	8f 91       	pop	r24
 1a8:	7f 91       	pop	r23
 1aa:	6f 91       	pop	r22
 1ac:	5f 91       	pop	r21
 1ae:	4f 91       	pop	r20
 1b0:	3f 91       	pop	r19
 1b2:	2f 91       	pop	r18
 1b4:	0f 90       	pop	r0
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	0f 90       	pop	r0
 1ba:	1f 90       	pop	r1
 1bc:	18 95       	reti

000001be <__vector_2>:

/*INT1 VECTOR ISR*/
ISR(INT1_vect)
{
 1be:	1f 92       	push	r1
 1c0:	0f 92       	push	r0
 1c2:	0f b6       	in	r0, 0x3f	; 63
 1c4:	0f 92       	push	r0
 1c6:	11 24       	eor	r1, r1
 1c8:	2f 93       	push	r18
 1ca:	3f 93       	push	r19
 1cc:	4f 93       	push	r20
 1ce:	5f 93       	push	r21
 1d0:	6f 93       	push	r22
 1d2:	7f 93       	push	r23
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
 1d8:	af 93       	push	r26
 1da:	bf 93       	push	r27
 1dc:	ef 93       	push	r30
 1de:	ff 93       	push	r31
	/*CALLING THE APPLICATION FUNCTION*/
	gp_int1_isr();
 1e0:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1e4:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1e8:	09 95       	icall
}
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	bf 91       	pop	r27
 1f0:	af 91       	pop	r26
 1f2:	9f 91       	pop	r25
 1f4:	8f 91       	pop	r24
 1f6:	7f 91       	pop	r23
 1f8:	6f 91       	pop	r22
 1fa:	5f 91       	pop	r21
 1fc:	4f 91       	pop	r20
 1fe:	3f 91       	pop	r19
 200:	2f 91       	pop	r18
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <__vector_3>:

/*INT2 VECTOR ISR*/
ISR(INT2_vect)
{
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
 216:	2f 93       	push	r18
 218:	3f 93       	push	r19
 21a:	4f 93       	push	r20
 21c:	5f 93       	push	r21
 21e:	6f 93       	push	r22
 220:	7f 93       	push	r23
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
 226:	af 93       	push	r26
 228:	bf 93       	push	r27
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
	/*CALLING THE APPLICATION FUNCTION*/
	gp_int1_isr();
 22e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 232:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 236:	09 95       	icall
 238:	ff 91       	pop	r31
 23a:	ef 91       	pop	r30
 23c:	bf 91       	pop	r27
 23e:	af 91       	pop	r26
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	7f 91       	pop	r23
 246:	6f 91       	pop	r22
 248:	5f 91       	pop	r21
 24a:	4f 91       	pop	r20
 24c:	3f 91       	pop	r19
 24e:	2f 91       	pop	r18
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <led_toggle_1>:
#include "DATA_TYPES.h"
#include "MDIO_INTERFACE.h"
#include "EXTI_INTERFACE.h"
void led_toggle_1(void)
{
	MDIO_TOGGLEPIN_VALUE(PORTC,PIN2);
 25a:	64 e0       	ldi	r22, 0x04	; 4
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	0e 94 c1 01 	call	0x382	; 0x382 <MDIO_TOGGLEPIN_VALUE>
 262:	08 95       	ret

00000264 <led_toggle_2>:
}
void led_toggle_2(void)
{
	MDIO_TOGGLEPIN_VALUE(PORTA,PIN0);
 264:	61 e0       	ldi	r22, 0x01	; 1
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 c1 01 	call	0x382	; 0x382 <MDIO_TOGGLEPIN_VALUE>
 26c:	08 95       	ret

0000026e <main>:
}

int main(void)
{
		MDIO_SETPIN_STATUS(PORTC,PIN2,OUTPUT);
 26e:	40 e0       	ldi	r20, 0x00	; 0
 270:	64 e0       	ldi	r22, 0x04	; 4
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MDIO_SETPIN_STATUS>
		MDIO_SETPIN_STATUS(PORTA,PIN0,OUTPUT);
 278:	40 e0       	ldi	r20, 0x00	; 0
 27a:	61 e0       	ldi	r22, 0x01	; 1
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MDIO_SETPIN_STATUS>
		MDIO_SETPIN_STATUS(PORTD,PIN2,INPUT_PULLUP);
 282:	42 e0       	ldi	r20, 0x02	; 2
 284:	64 e0       	ldi	r22, 0x04	; 4
 286:	83 e0       	ldi	r24, 0x03	; 3
 288:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MDIO_SETPIN_STATUS>
		MDIO_SETPIN_STATUS(PORTD,PIN3,INPUT_PULLUP);
 28c:	42 e0       	ldi	r20, 0x02	; 2
 28e:	68 e0       	ldi	r22, 0x08	; 8
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	0e 94 58 01 	call	0x2b0	; 0x2b0 <MDIO_SETPIN_STATUS>
		
		exti_init(EXTI_PIN0,exti_falling_edge,led_toggle_1);
 296:	4d e2       	ldi	r20, 0x2D	; 45
 298:	51 e0       	ldi	r21, 0x01	; 1
 29a:	63 e0       	ldi	r22, 0x03	; 3
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 3e 00 	call	0x7c	; 0x7c <exti_init>
		
		exti_init(EXTI_PIN1,exti_toggle,led_toggle_2);
 2a2:	42 e3       	ldi	r20, 0x32	; 50
 2a4:	51 e0       	ldi	r21, 0x01	; 1
 2a6:	62 e0       	ldi	r22, 0x02	; 2
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 3e 00 	call	0x7c	; 0x7c <exti_init>
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <main+0x40>

000002b0 <MDIO_SETPIN_STATUS>:

            break;

        /*INCASE OF LOW VALUE*/
        case LOW:
            MDIO_PORTD &= ~au8_pin; /*SETTING THE PINS TO 0*/
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	f9 f0       	breq	.+62     	; 0x2f2 <MDIO_SETPIN_STATUS+0x42>
 2b4:	30 f0       	brcs	.+12     	; 0x2c2 <MDIO_SETPIN_STATUS+0x12>
 2b6:	82 30       	cpi	r24, 0x02	; 2
 2b8:	a1 f1       	breq	.+104    	; 0x322 <MDIO_SETPIN_STATUS+0x72>
 2ba:	83 30       	cpi	r24, 0x03	; 3
 2bc:	09 f4       	brne	.+2      	; 0x2c0 <MDIO_SETPIN_STATUS+0x10>
 2be:	49 c0       	rjmp	.+146    	; 0x352 <MDIO_SETPIN_STATUS+0xa2>
 2c0:	08 95       	ret
 2c2:	41 30       	cpi	r20, 0x01	; 1
 2c4:	41 f0       	breq	.+16     	; 0x2d6 <MDIO_SETPIN_STATUS+0x26>
 2c6:	18 f0       	brcs	.+6      	; 0x2ce <MDIO_SETPIN_STATUS+0x1e>
 2c8:	42 30       	cpi	r20, 0x02	; 2
 2ca:	51 f0       	breq	.+20     	; 0x2e0 <MDIO_SETPIN_STATUS+0x30>
 2cc:	08 95       	ret
 2ce:	8a b3       	in	r24, 0x1a	; 26
 2d0:	68 2b       	or	r22, r24
 2d2:	6a bb       	out	0x1a, r22	; 26
 2d4:	08 95       	ret
 2d6:	8a b3       	in	r24, 0x1a	; 26
 2d8:	60 95       	com	r22
 2da:	68 23       	and	r22, r24
 2dc:	6a bb       	out	0x1a, r22	; 26
 2de:	08 95       	ret
 2e0:	8a b3       	in	r24, 0x1a	; 26
 2e2:	96 2f       	mov	r25, r22
 2e4:	90 95       	com	r25
 2e6:	89 23       	and	r24, r25
 2e8:	8a bb       	out	0x1a, r24	; 26
 2ea:	8b b3       	in	r24, 0x1b	; 27
 2ec:	68 2b       	or	r22, r24
 2ee:	6b bb       	out	0x1b, r22	; 27
 2f0:	08 95       	ret
 2f2:	41 30       	cpi	r20, 0x01	; 1
 2f4:	41 f0       	breq	.+16     	; 0x306 <MDIO_SETPIN_STATUS+0x56>
 2f6:	18 f0       	brcs	.+6      	; 0x2fe <MDIO_SETPIN_STATUS+0x4e>
 2f8:	42 30       	cpi	r20, 0x02	; 2
 2fa:	51 f0       	breq	.+20     	; 0x310 <MDIO_SETPIN_STATUS+0x60>
 2fc:	08 95       	ret
 2fe:	87 b3       	in	r24, 0x17	; 23
 300:	68 2b       	or	r22, r24
 302:	67 bb       	out	0x17, r22	; 23
 304:	08 95       	ret
 306:	87 b3       	in	r24, 0x17	; 23
 308:	60 95       	com	r22
 30a:	68 23       	and	r22, r24
 30c:	67 bb       	out	0x17, r22	; 23
 30e:	08 95       	ret
 310:	87 b3       	in	r24, 0x17	; 23
 312:	96 2f       	mov	r25, r22
 314:	90 95       	com	r25
 316:	89 23       	and	r24, r25
 318:	87 bb       	out	0x17, r24	; 23
 31a:	88 b3       	in	r24, 0x18	; 24
 31c:	68 2b       	or	r22, r24
 31e:	68 bb       	out	0x18, r22	; 24
 320:	08 95       	ret
 322:	41 30       	cpi	r20, 0x01	; 1
 324:	41 f0       	breq	.+16     	; 0x336 <MDIO_SETPIN_STATUS+0x86>
 326:	18 f0       	brcs	.+6      	; 0x32e <MDIO_SETPIN_STATUS+0x7e>
 328:	42 30       	cpi	r20, 0x02	; 2
 32a:	51 f0       	breq	.+20     	; 0x340 <MDIO_SETPIN_STATUS+0x90>
 32c:	08 95       	ret
 32e:	84 b3       	in	r24, 0x14	; 20
 330:	68 2b       	or	r22, r24
 332:	64 bb       	out	0x14, r22	; 20
 334:	08 95       	ret
 336:	84 b3       	in	r24, 0x14	; 20
 338:	60 95       	com	r22
 33a:	68 23       	and	r22, r24
 33c:	64 bb       	out	0x14, r22	; 20
 33e:	08 95       	ret
 340:	84 b3       	in	r24, 0x14	; 20
 342:	96 2f       	mov	r25, r22
 344:	90 95       	com	r25
 346:	89 23       	and	r24, r25
 348:	84 bb       	out	0x14, r24	; 20
 34a:	85 b3       	in	r24, 0x15	; 21
 34c:	68 2b       	or	r22, r24
 34e:	65 bb       	out	0x15, r22	; 21
 350:	08 95       	ret
 352:	41 30       	cpi	r20, 0x01	; 1
 354:	41 f0       	breq	.+16     	; 0x366 <MDIO_SETPIN_STATUS+0xb6>
 356:	18 f0       	brcs	.+6      	; 0x35e <MDIO_SETPIN_STATUS+0xae>
 358:	42 30       	cpi	r20, 0x02	; 2
 35a:	51 f0       	breq	.+20     	; 0x370 <MDIO_SETPIN_STATUS+0xc0>
 35c:	08 95       	ret
 35e:	81 b3       	in	r24, 0x11	; 17
 360:	68 2b       	or	r22, r24
 362:	61 bb       	out	0x11, r22	; 17
 364:	08 95       	ret
 366:	81 b3       	in	r24, 0x11	; 17
 368:	60 95       	com	r22
 36a:	68 23       	and	r22, r24
 36c:	61 bb       	out	0x11, r22	; 17
 36e:	08 95       	ret
 370:	81 b3       	in	r24, 0x11	; 17
 372:	96 2f       	mov	r25, r22
 374:	90 95       	com	r25
 376:	89 23       	and	r24, r25
 378:	81 bb       	out	0x11, r24	; 17
 37a:	82 b3       	in	r24, 0x12	; 18
 37c:	68 2b       	or	r22, r24
 37e:	62 bb       	out	0x12, r22	; 18
 380:	08 95       	ret

00000382 <MDIO_TOGGLEPIN_VALUE>:
    return;
}

void MDIO_TOGGLEPIN_VALUE(u8_t au8_port, u8_t au8_pin)
{
    switch (au8_port)
 382:	81 30       	cpi	r24, 0x01	; 1
 384:	51 f0       	breq	.+20     	; 0x39a <MDIO_TOGGLEPIN_VALUE+0x18>
 386:	28 f0       	brcs	.+10     	; 0x392 <MDIO_TOGGLEPIN_VALUE+0x10>
 388:	82 30       	cpi	r24, 0x02	; 2
 38a:	59 f0       	breq	.+22     	; 0x3a2 <MDIO_TOGGLEPIN_VALUE+0x20>
 38c:	83 30       	cpi	r24, 0x03	; 3
 38e:	69 f0       	breq	.+26     	; 0x3aa <MDIO_TOGGLEPIN_VALUE+0x28>
 390:	08 95       	ret
    {
    /*incase of portA*/
    case PORTA:

        MDIO_PORTA ^= au8_pin; /*TOGGLEING THE PIN VALUE*/
 392:	8b b3       	in	r24, 0x1b	; 27
 394:	68 27       	eor	r22, r24
 396:	6b bb       	out	0x1b, r22	; 27

        break;
 398:	08 95       	ret
    /*incase of portB*/
    case PORTB:

        MDIO_PORTB ^= au8_pin; /*TOGGLEING THE PIN VALUE*/
 39a:	88 b3       	in	r24, 0x18	; 24
 39c:	68 27       	eor	r22, r24
 39e:	68 bb       	out	0x18, r22	; 24

        break;
 3a0:	08 95       	ret
    /*incase of portC*/
    case PORTC:

        MDIO_PORTC ^= au8_pin; /*TOGGLEING THE PIN VALUE*/
 3a2:	85 b3       	in	r24, 0x15	; 21
 3a4:	68 27       	eor	r22, r24
 3a6:	65 bb       	out	0x15, r22	; 21

        break;
 3a8:	08 95       	ret
    /*incase of portD*/
    case PORTD:

        MDIO_PORTD ^= au8_pin; /*TOGGLEING THE PIN VALUE*/
 3aa:	82 b3       	in	r24, 0x12	; 18
 3ac:	68 27       	eor	r22, r24
 3ae:	62 bb       	out	0x12, r22	; 18
 3b0:	08 95       	ret

000003b2 <_exit>:
 3b2:	f8 94       	cli

000003b4 <__stop_program>:
 3b4:	ff cf       	rjmp	.-2      	; 0x3b4 <__stop_program>
