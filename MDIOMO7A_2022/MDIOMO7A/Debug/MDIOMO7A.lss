
MDIOMO7A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000031a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000091a  00000000  00000000  000003e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000652  00000000  00000000  00000cfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b6  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00001804  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b7  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005fb  00000000  00000000  00001c33  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000222e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	MDIO_SETPIN_STATUS(PORTB,PIN0|PIN1,OUTPUT);
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	63 e0       	ldi	r22, 0x03	; 3
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	0e 94 7e 00 	call	0xfc	; 0xfc <MDIO_SETPIN_STATUS>
	MDIO_SETPIN_STATUS(PORTC,PIN7,INPUT_PULLUP);
  76:	42 e0       	ldi	r20, 0x02	; 2
  78:	60 e8       	ldi	r22, 0x80	; 128
  7a:	82 e0       	ldi	r24, 0x02	; 2
  7c:	0e 94 7e 00 	call	0xfc	; 0xfc <MDIO_SETPIN_STATUS>
	
    while (1) 
    {
		if (MDIO_GETPIN_VALUE(PORTC,PIN7))
  80:	60 e8       	ldi	r22, 0x80	; 128
  82:	82 e0       	ldi	r24, 0x02	; 2
  84:	0e 94 3b 01 	call	0x276	; 0x276 <MDIO_GETPIN_VALUE>
  88:	88 23       	and	r24, r24
  8a:	e1 f0       	breq	.+56     	; 0xc4 <main+0x58>
		{
			MDIO_SETPIN_VALUE(PORTB,PIN0,HIGH);
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	0e 94 e7 00 	call	0x1ce	; 0x1ce <MDIO_SETPIN_VALUE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	81 ee       	ldi	r24, 0xE1	; 225
  9a:	94 e0       	ldi	r25, 0x04	; 4
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
			_delay_ms(100);
			MDIO_TOGGLEPIN_VALUE(PORTB,PIN0);
  a8:	61 e0       	ldi	r22, 0x01	; 1
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 23 01 	call	0x246	; 0x246 <MDIO_TOGGLEPIN_VALUE>
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	81 ee       	ldi	r24, 0xE1	; 225
  b4:	94 e0       	ldi	r25, 0x04	; 4
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	80 40       	sbci	r24, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x4a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x54>
  c0:	00 00       	nop
  c2:	de cf       	rjmp	.-68     	; 0x80 <main+0x14>
			_delay_ms(100);
		}
		else
		{

			MDIO_SETPIN_VALUE(PORTB,PIN1,HIGH);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 e7 00 	call	0x1ce	; 0x1ce <MDIO_SETPIN_VALUE>
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	81 ee       	ldi	r24, 0xE1	; 225
  d2:	94 e0       	ldi	r25, 0x04	; 4
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x68>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x72>
  de:	00 00       	nop
			_delay_ms(100);
			MDIO_TOGGLEPIN_VALUE(PORTB,PIN1);
  e0:	62 e0       	ldi	r22, 0x02	; 2
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 23 01 	call	0x246	; 0x246 <MDIO_TOGGLEPIN_VALUE>
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	81 ee       	ldi	r24, 0xE1	; 225
  ec:	94 e0       	ldi	r25, 0x04	; 4
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x82>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x8c>
  f8:	00 00       	nop
  fa:	c2 cf       	rjmp	.-124    	; 0x80 <main+0x14>

000000fc <MDIO_SETPIN_STATUS>:
/*FUNCTIONS DEFINITIONS*/

void MDIO_SETPIN_STATUS(u8_t au8_port,u8_t au8_pin,u8_t au8_status)
{

switch (au8_port)
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	f9 f0       	breq	.+62     	; 0x13e <MDIO_SETPIN_STATUS+0x42>
 100:	30 f0       	brcs	.+12     	; 0x10e <MDIO_SETPIN_STATUS+0x12>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	a1 f1       	breq	.+104    	; 0x16e <MDIO_SETPIN_STATUS+0x72>
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	09 f4       	brne	.+2      	; 0x10c <MDIO_SETPIN_STATUS+0x10>
 10a:	49 c0       	rjmp	.+146    	; 0x19e <MDIO_SETPIN_STATUS+0xa2>
 10c:	08 95       	ret
{
    /*incase of port A*/
    case PORTA:

        /*GETTING THE STATUS*/
        switch (au8_status)
 10e:	41 30       	cpi	r20, 0x01	; 1
 110:	41 f0       	breq	.+16     	; 0x122 <MDIO_SETPIN_STATUS+0x26>
 112:	18 f0       	brcs	.+6      	; 0x11a <MDIO_SETPIN_STATUS+0x1e>
 114:	42 30       	cpi	r20, 0x02	; 2
 116:	51 f0       	breq	.+20     	; 0x12c <MDIO_SETPIN_STATUS+0x30>
 118:	08 95       	ret
        {
            /*INCASE OF OUTPUT*/
        case OUTPUT:
           MDIO_DDRA|=au8_pin;   /*SETTING THE VALUE OF THE PINS IN DDRA BY 1*/
 11a:	8a b3       	in	r24, 0x1a	; 26
 11c:	68 2b       	or	r22, r24
 11e:	6a bb       	out	0x1a, r22	; 26

           break;
 120:	08 95       	ret

            /*INCASE OF INPUT FLOAT*/
        case INPUT_FLOAT:
            
            MDIO_DDRA &= ~au8_pin;   /*SETTING THE VALUE OF THE PINS IN DDRA BY 0*/
 122:	8a b3       	in	r24, 0x1a	; 26
 124:	60 95       	com	r22
 126:	68 23       	and	r22, r24
 128:	6a bb       	out	0x1a, r22	; 26

            break;
 12a:	08 95       	ret
        
            /*INCASE OF INPUT PULLUP*/
        case INPUT_PULLUP:

            MDIO_DDRA &= ~au8_pin;   /*SETTING THE VALUE OF THE PINS IN PINS BY 0*/
 12c:	8a b3       	in	r24, 0x1a	; 26
 12e:	96 2f       	mov	r25, r22
 130:	90 95       	com	r25
 132:	89 23       	and	r24, r25
 134:	8a bb       	out	0x1a, r24	; 26
           
			MDIO_PORTA |= au8_pin;  /*Set the specified pins to 1 in PORT*/
 136:	8b b3       	in	r24, 0x1b	; 27
 138:	68 2b       	or	r22, r24
 13a:	6b bb       	out	0x1b, r22	; 27
            break;
 13c:	08 95       	ret
        break;

    case PORTB:

        /*GETTING THE STATUS*/
        switch (au8_status)
 13e:	41 30       	cpi	r20, 0x01	; 1
 140:	41 f0       	breq	.+16     	; 0x152 <MDIO_SETPIN_STATUS+0x56>
 142:	18 f0       	brcs	.+6      	; 0x14a <MDIO_SETPIN_STATUS+0x4e>
 144:	42 30       	cpi	r20, 0x02	; 2
 146:	51 f0       	breq	.+20     	; 0x15c <MDIO_SETPIN_STATUS+0x60>
 148:	08 95       	ret
        {
            /*INCASE OF OUTPUT*/
        case OUTPUT:
           MDIO_DDRB|=au8_pin;   /*SETTING THE VALUE OF THE PINS IN DDRA BY 1*/
 14a:	87 b3       	in	r24, 0x17	; 23
 14c:	68 2b       	or	r22, r24
 14e:	67 bb       	out	0x17, r22	; 23

           break;
 150:	08 95       	ret

            /*INCASE OF INPUT FLOAT*/
        case INPUT_FLOAT:
            
            MDIO_DDRB &= ~au8_pin;   /*SETTING THE VALUE OF THE PINS IN DDRA BY 0*/
 152:	87 b3       	in	r24, 0x17	; 23
 154:	60 95       	com	r22
 156:	68 23       	and	r22, r24
 158:	67 bb       	out	0x17, r22	; 23

            break;
 15a:	08 95       	ret
        
            /*INCASE OF INPUT PULLUP*/
        case INPUT_PULLUP:

            MDIO_DDRB &= ~au8_pin;   /*SETTING THE VALUE OF THE PINS IN PINS BY 0*/
 15c:	87 b3       	in	r24, 0x17	; 23
 15e:	96 2f       	mov	r25, r22
 160:	90 95       	com	r25
 162:	89 23       	and	r24, r25
 164:	87 bb       	out	0x17, r24	; 23
           
			MDIO_PORTB |= au8_pin;  /*Set the specified pins to 1 in PORT*/
 166:	88 b3       	in	r24, 0x18	; 24
 168:	68 2b       	or	r22, r24
 16a:	68 bb       	out	0x18, r22	; 24
            break;
 16c:	08 95       	ret
        break;
        /*incase of port C*/
    case PORTC:

        /*GETTING THE STATUS*/
        switch (au8_status)
 16e:	41 30       	cpi	r20, 0x01	; 1
 170:	41 f0       	breq	.+16     	; 0x182 <MDIO_SETPIN_STATUS+0x86>
 172:	18 f0       	brcs	.+6      	; 0x17a <MDIO_SETPIN_STATUS+0x7e>
 174:	42 30       	cpi	r20, 0x02	; 2
 176:	51 f0       	breq	.+20     	; 0x18c <MDIO_SETPIN_STATUS+0x90>
 178:	08 95       	ret
        {
            /*INCASE OF OUTPUT*/
        case OUTPUT:
           MDIO_DDRC|=au8_pin;   /*SETTING THE VALUE OF THE PINS IN DDRA BY 1*/
 17a:	84 b3       	in	r24, 0x14	; 20
 17c:	68 2b       	or	r22, r24
 17e:	64 bb       	out	0x14, r22	; 20

           break;
 180:	08 95       	ret

            /*INCASE OF INPUT FLOAT*/
        case INPUT_FLOAT:
            
            MDIO_DDRC &= ~au8_pin;   /*SETTING THE VALUE OF THE PINS IN DDRA BY 0*/
 182:	84 b3       	in	r24, 0x14	; 20
 184:	60 95       	com	r22
 186:	68 23       	and	r22, r24
 188:	64 bb       	out	0x14, r22	; 20

            break;
 18a:	08 95       	ret
        
            /*INCASE OF INPUT PULLUP*/
        case INPUT_PULLUP:

           MDIO_DDRC &= ~au8_pin;   /*SETTING THE VALUE OF THE PINS IN PINS BY 0*/
 18c:	84 b3       	in	r24, 0x14	; 20
 18e:	96 2f       	mov	r25, r22
 190:	90 95       	com	r25
 192:	89 23       	and	r24, r25
 194:	84 bb       	out	0x14, r24	; 20
           
			MDIO_PORTC |= au8_pin;  /*Set the specified pins to 1 in PORT*/
 196:	85 b3       	in	r24, 0x15	; 21
 198:	68 2b       	or	r22, r24
 19a:	65 bb       	out	0x15, r22	; 21

            break;
 19c:	08 95       	ret
        break;
        /*incase of port D*/
    case PORTD:

        /*GETTING THE STATUS*/
        switch (au8_status)
 19e:	41 30       	cpi	r20, 0x01	; 1
 1a0:	41 f0       	breq	.+16     	; 0x1b2 <MDIO_SETPIN_STATUS+0xb6>
 1a2:	18 f0       	brcs	.+6      	; 0x1aa <MDIO_SETPIN_STATUS+0xae>
 1a4:	42 30       	cpi	r20, 0x02	; 2
 1a6:	51 f0       	breq	.+20     	; 0x1bc <MDIO_SETPIN_STATUS+0xc0>
 1a8:	08 95       	ret
        {
            /*INCASE OF OUTPUT*/
        case OUTPUT:
           MDIO_DDRD|=au8_pin;   /*SETTING THE VALUE OF THE PINS IN DDRA BY 1*/
 1aa:	81 b3       	in	r24, 0x11	; 17
 1ac:	68 2b       	or	r22, r24
 1ae:	61 bb       	out	0x11, r22	; 17

           break;
 1b0:	08 95       	ret

            /*INCASE OF INPUT FLOAT*/
        case INPUT_FLOAT:
            
            MDIO_DDRD &= ~au8_pin;   /*SETTING THE VALUE OF THE PINS IN DDRA BY 0*/
 1b2:	81 b3       	in	r24, 0x11	; 17
 1b4:	60 95       	com	r22
 1b6:	68 23       	and	r22, r24
 1b8:	61 bb       	out	0x11, r22	; 17

            break;
 1ba:	08 95       	ret
        
            /*INCASE OF INPUT PULLUP*/
        case INPUT_PULLUP:

            MDIO_DDRD &= ~au8_pin;  /*SETTING THE VALUE OF THE PINS IN PINS BY 0*/
 1bc:	81 b3       	in	r24, 0x11	; 17
 1be:	96 2f       	mov	r25, r22
 1c0:	90 95       	com	r25
 1c2:	89 23       	and	r24, r25
 1c4:	81 bb       	out	0x11, r24	; 17
           
			MDIO_PORTD |= au8_pin;  /*Set the specified pins to 1 in PORT*/
 1c6:	82 b3       	in	r24, 0x12	; 18
 1c8:	68 2b       	or	r22, r24
 1ca:	62 bb       	out	0x12, r22	; 18
 1cc:	08 95       	ret

000001ce <MDIO_SETPIN_VALUE>:
return ;
}

void MDIO_SETPIN_VALUE(u8_t au8_port,u8_t au8_pin,u8_t au8_value)
{
    switch (au8_port)
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	99 f0       	breq	.+38     	; 0x1f8 <MDIO_SETPIN_VALUE+0x2a>
 1d2:	28 f0       	brcs	.+10     	; 0x1de <MDIO_SETPIN_VALUE+0x10>
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	e9 f0       	breq	.+58     	; 0x212 <MDIO_SETPIN_VALUE+0x44>
 1d8:	83 30       	cpi	r24, 0x03	; 3
 1da:	41 f1       	breq	.+80     	; 0x22c <MDIO_SETPIN_VALUE+0x5e>
 1dc:	08 95       	ret
    {
        /*incase of portA*/
        case PORTA:
        
            switch(au8_value)
 1de:	44 23       	and	r20, r20
 1e0:	31 f0       	breq	.+12     	; 0x1ee <MDIO_SETPIN_VALUE+0x20>
 1e2:	41 30       	cpi	r20, 0x01	; 1
 1e4:	49 f4       	brne	.+18     	; 0x1f8 <MDIO_SETPIN_VALUE+0x2a>
            {
                /*INCASE OF HIGH VALUE*/
                case HIGH:
                MDIO_PORTA|=au8_pin;    /*SETTING THE PINS TO 1*/
 1e6:	8b b3       	in	r24, 0x1b	; 27
 1e8:	86 2b       	or	r24, r22
 1ea:	8b bb       	out	0x1b, r24	; 27

                break;
 1ec:	05 c0       	rjmp	.+10     	; 0x1f8 <MDIO_SETPIN_VALUE+0x2a>

                /*INCASE OF LOW VALUE*/
                case LOW:
                MDIO_PORTA&= ~au8_pin;  /*SETTING THE PINS TO 0*/
 1ee:	8b b3       	in	r24, 0x1b	; 27
 1f0:	96 2f       	mov	r25, r22
 1f2:	90 95       	com	r25
 1f4:	89 23       	and	r24, r25
 1f6:	8b bb       	out	0x1b, r24	; 27

            }
            /*incase of portB*/
        case PORTB:

            switch(au8_value)
 1f8:	44 23       	and	r20, r20
 1fa:	31 f0       	breq	.+12     	; 0x208 <MDIO_SETPIN_VALUE+0x3a>
 1fc:	41 30       	cpi	r20, 0x01	; 1
 1fe:	49 f4       	brne	.+18     	; 0x212 <MDIO_SETPIN_VALUE+0x44>
            {
                /*INCASE OF HIGH VALUE*/
                case HIGH:
                MDIO_PORTB|=au8_pin;    /*SETTING THE PINS TO 1*/
 200:	88 b3       	in	r24, 0x18	; 24
 202:	86 2b       	or	r24, r22
 204:	88 bb       	out	0x18, r24	; 24

                break;
 206:	05 c0       	rjmp	.+10     	; 0x212 <MDIO_SETPIN_VALUE+0x44>

                /*INCASE OF LOW VALUE*/
                case LOW:
                MDIO_PORTB&= ~au8_pin;  /*SETTING THE PINS TO 0*/
 208:	88 b3       	in	r24, 0x18	; 24
 20a:	96 2f       	mov	r25, r22
 20c:	90 95       	com	r25
 20e:	89 23       	and	r24, r25
 210:	88 bb       	out	0x18, r24	; 24

            }
            /*incase of portC*/
        case PORTC:

            switch(au8_value)
 212:	44 23       	and	r20, r20
 214:	31 f0       	breq	.+12     	; 0x222 <MDIO_SETPIN_VALUE+0x54>
 216:	41 30       	cpi	r20, 0x01	; 1
 218:	49 f4       	brne	.+18     	; 0x22c <MDIO_SETPIN_VALUE+0x5e>
            {
                /*INCASE OF HIGH VALUE*/
                case HIGH:
                MDIO_PORTC|=au8_pin;    /*SETTING THE PINS TO 1*/
 21a:	85 b3       	in	r24, 0x15	; 21
 21c:	86 2b       	or	r24, r22
 21e:	85 bb       	out	0x15, r24	; 21

                break;
 220:	05 c0       	rjmp	.+10     	; 0x22c <MDIO_SETPIN_VALUE+0x5e>

                /*INCASE OF LOW VALUE*/
                case LOW:
                MDIO_PORTC&= ~au8_pin;  /*SETTING THE PINS TO 0*/
 222:	85 b3       	in	r24, 0x15	; 21
 224:	96 2f       	mov	r25, r22
 226:	90 95       	com	r25
 228:	89 23       	and	r24, r25
 22a:	85 bb       	out	0x15, r24	; 21
                break;

            }
            /*incase of portD*/
        case PORTD:
            switch(au8_value)
 22c:	44 23       	and	r20, r20
 22e:	31 f0       	breq	.+12     	; 0x23c <MDIO_SETPIN_VALUE+0x6e>
 230:	41 30       	cpi	r20, 0x01	; 1
 232:	41 f4       	brne	.+16     	; 0x244 <MDIO_SETPIN_VALUE+0x76>
            {
                /*INCASE OF HIGH VALUE*/
                case HIGH:
                MDIO_PORTD|=au8_pin;    /*SETTING THE PINS TO 1*/
 234:	82 b3       	in	r24, 0x12	; 18
 236:	68 2b       	or	r22, r24
 238:	62 bb       	out	0x12, r22	; 18

                break;
 23a:	08 95       	ret

                /*INCASE OF LOW VALUE*/
                case LOW:
                MDIO_PORTD&= ~au8_pin;  /*SETTING THE PINS TO 0*/
 23c:	82 b3       	in	r24, 0x12	; 18
 23e:	60 95       	com	r22
 240:	68 23       	and	r22, r24
 242:	62 bb       	out	0x12, r22	; 18
 244:	08 95       	ret

00000246 <MDIO_TOGGLEPIN_VALUE>:
return ;
}

void MDIO_TOGGLEPIN_VALUE(u8_t au8_port,u8_t au8_pin)
{
    switch (au8_port)
 246:	81 30       	cpi	r24, 0x01	; 1
 248:	51 f0       	breq	.+20     	; 0x25e <MDIO_TOGGLEPIN_VALUE+0x18>
 24a:	28 f0       	brcs	.+10     	; 0x256 <MDIO_TOGGLEPIN_VALUE+0x10>
 24c:	82 30       	cpi	r24, 0x02	; 2
 24e:	59 f0       	breq	.+22     	; 0x266 <MDIO_TOGGLEPIN_VALUE+0x20>
 250:	83 30       	cpi	r24, 0x03	; 3
 252:	69 f0       	breq	.+26     	; 0x26e <MDIO_TOGGLEPIN_VALUE+0x28>
 254:	08 95       	ret
    {
    /*incase of portA*/
    case PORTA :

        MDIO_PORTA^=au8_pin;   /*TOGGLEING THE PIN VALUE*/
 256:	8b b3       	in	r24, 0x1b	; 27
 258:	68 27       	eor	r22, r24
 25a:	6b bb       	out	0x1b, r22	; 27

        break;
 25c:	08 95       	ret
    /*incase of portB*/
    case PORTB :

        MDIO_PORTB^=au8_pin;    /*TOGGLEING THE PIN VALUE*/
 25e:	88 b3       	in	r24, 0x18	; 24
 260:	68 27       	eor	r22, r24
 262:	68 bb       	out	0x18, r22	; 24

        break;
 264:	08 95       	ret
    /*incase of portC*/
    case PORTC :

        MDIO_PORTC^=au8_pin;    /*TOGGLEING THE PIN VALUE*/
 266:	85 b3       	in	r24, 0x15	; 21
 268:	68 27       	eor	r22, r24
 26a:	65 bb       	out	0x15, r22	; 21

        break;
 26c:	08 95       	ret
    /*incase of portD*/
    case PORTD :

        MDIO_PORTD^=au8_pin;    /*TOGGLEING THE PIN VALUE*/
 26e:	82 b3       	in	r24, 0x12	; 18
 270:	68 27       	eor	r22, r24
 272:	62 bb       	out	0x12, r22	; 18
 274:	08 95       	ret

00000276 <MDIO_GETPIN_VALUE>:
u8_t MDIO_GETPIN_VALUE(u8_t au8_port,u8_t au8_pin)
{
    u8_t au8_pinvalue =0; /*creating a variable to carry the value of the pin*/
    

    switch(au8_port)
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	59 f0       	breq	.+22     	; 0x290 <MDIO_GETPIN_VALUE+0x1a>
 27a:	28 f0       	brcs	.+10     	; 0x286 <MDIO_GETPIN_VALUE+0x10>
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	69 f0       	breq	.+26     	; 0x29a <MDIO_GETPIN_VALUE+0x24>
 280:	83 30       	cpi	r24, 0x03	; 3
 282:	81 f0       	breq	.+32     	; 0x2a4 <MDIO_GETPIN_VALUE+0x2e>
 284:	14 c0       	rjmp	.+40     	; 0x2ae <MDIO_GETPIN_VALUE+0x38>
    {
        /*INCASE OF PORT A*/
        case PORTA:
            if(MDIO_PINA & au8_pin) // the value is 1
 286:	89 b3       	in	r24, 0x19	; 25
 288:	68 23       	and	r22, r24
 28a:	99 f0       	breq	.+38     	; 0x2b2 <MDIO_GETPIN_VALUE+0x3c>
            {
                au8_pinvalue =HIGH;
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	08 95       	ret
        
        break;

        /*INCASE OF PORT B*/
        case PORTB:
            if(MDIO_PINB & au8_pin) // the value is 1
 290:	86 b3       	in	r24, 0x16	; 22
 292:	68 23       	and	r22, r24
 294:	81 f0       	breq	.+32     	; 0x2b6 <MDIO_GETPIN_VALUE+0x40>
            {
                au8_pinvalue =HIGH;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	08 95       	ret
        
        break;

        /*INCASE OF PORT C*/
        case PORTC:
            if(MDIO_PINC & au8_pin) // the value is 1
 29a:	83 b3       	in	r24, 0x13	; 19
 29c:	68 23       	and	r22, r24
 29e:	69 f0       	breq	.+26     	; 0x2ba <MDIO_GETPIN_VALUE+0x44>
            {
                au8_pinvalue =HIGH;
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	08 95       	ret
        
        break;

        /*INCASE OF PORT D*/
        case PORTD:
            if(MDIO_PIND & au8_pin) // the value is 1
 2a4:	80 b3       	in	r24, 0x10	; 16
 2a6:	68 23       	and	r22, r24
 2a8:	51 f0       	breq	.+20     	; 0x2be <MDIO_GETPIN_VALUE+0x48>
            {
                au8_pinvalue =HIGH;
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	08 95       	ret
return;
}

u8_t MDIO_GETPIN_VALUE(u8_t au8_port,u8_t au8_pin)
{
    u8_t au8_pinvalue =0; /*creating a variable to carry the value of the pin*/
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	08 95       	ret
            if(MDIO_PINA & au8_pin) // the value is 1
            {
                au8_pinvalue =HIGH;
            }
            else
                au8_pinvalue =LOW; //the value is 0
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	08 95       	ret
            if(MDIO_PINB & au8_pin) // the value is 1
            {
                au8_pinvalue =HIGH;
            }
            else
                au8_pinvalue =LOW; //the value is 0
 2b6:	80 e0       	ldi	r24, 0x00	; 0
 2b8:	08 95       	ret
            if(MDIO_PINC & au8_pin) // the value is 1
            {
                au8_pinvalue =HIGH;
            }
            else
                au8_pinvalue =LOW; //the value is 0
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	08 95       	ret
            if(MDIO_PIND & au8_pin) // the value is 1
            {
                au8_pinvalue =HIGH;
            }
            else
                au8_pinvalue =LOW; //the value is 0
 2be:	80 e0       	ldi	r24, 0x00	; 0
        
        break;
    }

return au8_pinvalue ;
}
 2c0:	08 95       	ret

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
