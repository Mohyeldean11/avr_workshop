
PWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000096c  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000703  00000000  00000000  00000c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000594  00000000  00000000  0000139b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001930  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000414  00000000  00000000  000019f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006b3  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000024bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU	8000000UL
#include "util/delay.h"

int main(void)
{
	PWM_INIT(FAST_PWM,clk_64);
  6c:	63 e0       	ldi	r22, 0x03	; 3
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	0e 94 a8 00 	call	0x150	; 0x150 <PWM_INIT>
	PWM_dynamics(incrementation,120);
  74:	68 e7       	ldi	r22, 0x78	; 120
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	0e 94 cf 00 	call	0x19e	; 0x19e <PWM_dynamics>
  7c:	ff cf       	rjmp	.-2      	; 0x7c <main+0x10>

0000007e <MDIO_SETPIN_STATUS>:
/*FUNCTIONS DEFINITIONS*/

void MDIO_SETPIN_STATUS(u8_t au8_port,u8_t au8_pin,u8_t au8_status)
{

switch (au8_port)
  7e:	81 30       	cpi	r24, 0x01	; 1
  80:	f9 f0       	breq	.+62     	; 0xc0 <MDIO_SETPIN_STATUS+0x42>
  82:	30 f0       	brcs	.+12     	; 0x90 <MDIO_SETPIN_STATUS+0x12>
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	a1 f1       	breq	.+104    	; 0xf0 <MDIO_SETPIN_STATUS+0x72>
  88:	83 30       	cpi	r24, 0x03	; 3
  8a:	09 f4       	brne	.+2      	; 0x8e <MDIO_SETPIN_STATUS+0x10>
  8c:	49 c0       	rjmp	.+146    	; 0x120 <MDIO_SETPIN_STATUS+0xa2>
  8e:	08 95       	ret
{
    /*incase of port A*/
    case PORTA:
        
        /*GETTING THE STATUS*/
        switch (au8_status)
  90:	41 30       	cpi	r20, 0x01	; 1
  92:	41 f0       	breq	.+16     	; 0xa4 <MDIO_SETPIN_STATUS+0x26>
  94:	18 f0       	brcs	.+6      	; 0x9c <MDIO_SETPIN_STATUS+0x1e>
  96:	42 30       	cpi	r20, 0x02	; 2
  98:	51 f0       	breq	.+20     	; 0xae <MDIO_SETPIN_STATUS+0x30>
  9a:	08 95       	ret
        {
            /*INCASE OF OUTPUT*/
        case OUTPUT:
           MDIO_DDRA|=au8_pin;   /*SETTING THE VALUE OF THE PINS IN DDRA BY 1*/
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	68 2b       	or	r22, r24
  a0:	6a bb       	out	0x1a, r22	; 26

           break;
  a2:	08 95       	ret

            /*INCASE OF INPUT FLOAT*/
        case INPUT_FLOAT:
            
            MDIO_DDRA &= ~au8_pin;   /*SETTING THE VALUE OF THE PINS IN DDRA BY 0*/
  a4:	8a b3       	in	r24, 0x1a	; 26
  a6:	60 95       	com	r22
  a8:	68 23       	and	r22, r24
  aa:	6a bb       	out	0x1a, r22	; 26

            break;
  ac:	08 95       	ret
        
            /*INCASE OF INPUT PULLUP*/
        case INPUT_PULLUP:

            MDIO_DDRA &= ~au8_pin;   /*SETTING THE VALUE OF THE PINS IN PINS BY 0*/
  ae:	8a b3       	in	r24, 0x1a	; 26
  b0:	96 2f       	mov	r25, r22
  b2:	90 95       	com	r25
  b4:	89 23       	and	r24, r25
  b6:	8a bb       	out	0x1a, r24	; 26
           
			MDIO_PORTA |= au8_pin;  /*Set the specified pins to 1 in PORT*/
  b8:	8b b3       	in	r24, 0x1b	; 27
  ba:	68 2b       	or	r22, r24
  bc:	6b bb       	out	0x1b, r22	; 27
            break;
  be:	08 95       	ret
        break;

    case PORTB:

        /*GETTING THE STATUS*/
        switch (au8_status)
  c0:	41 30       	cpi	r20, 0x01	; 1
  c2:	41 f0       	breq	.+16     	; 0xd4 <MDIO_SETPIN_STATUS+0x56>
  c4:	18 f0       	brcs	.+6      	; 0xcc <MDIO_SETPIN_STATUS+0x4e>
  c6:	42 30       	cpi	r20, 0x02	; 2
  c8:	51 f0       	breq	.+20     	; 0xde <MDIO_SETPIN_STATUS+0x60>
  ca:	08 95       	ret
        {
            /*INCASE OF OUTPUT*/
        case OUTPUT:
           MDIO_DDRB|=au8_pin;   /*SETTING THE VALUE OF THE PINS IN DDRA BY 1*/
  cc:	87 b3       	in	r24, 0x17	; 23
  ce:	68 2b       	or	r22, r24
  d0:	67 bb       	out	0x17, r22	; 23

           break;
  d2:	08 95       	ret

            /*INCASE OF INPUT FLOAT*/
        case INPUT_FLOAT:
            
            MDIO_DDRB &= ~au8_pin;   /*SETTING THE VALUE OF THE PINS IN DDRA BY 0*/
  d4:	87 b3       	in	r24, 0x17	; 23
  d6:	60 95       	com	r22
  d8:	68 23       	and	r22, r24
  da:	67 bb       	out	0x17, r22	; 23

            break;
  dc:	08 95       	ret
        
            /*INCASE OF INPUT PULLUP*/
        case INPUT_PULLUP:

            MDIO_DDRB &= ~au8_pin;   /*SETTING THE VALUE OF THE PINS IN PINS BY 0*/
  de:	87 b3       	in	r24, 0x17	; 23
  e0:	96 2f       	mov	r25, r22
  e2:	90 95       	com	r25
  e4:	89 23       	and	r24, r25
  e6:	87 bb       	out	0x17, r24	; 23
           
			MDIO_PORTB |= au8_pin;  /*Set the specified pins to 1 in PORT*/
  e8:	88 b3       	in	r24, 0x18	; 24
  ea:	68 2b       	or	r22, r24
  ec:	68 bb       	out	0x18, r22	; 24
            break;
  ee:	08 95       	ret
        break;
        /*incase of port C*/
    case PORTC:

        /*GETTING THE STATUS*/
        switch (au8_status)
  f0:	41 30       	cpi	r20, 0x01	; 1
  f2:	41 f0       	breq	.+16     	; 0x104 <MDIO_SETPIN_STATUS+0x86>
  f4:	18 f0       	brcs	.+6      	; 0xfc <MDIO_SETPIN_STATUS+0x7e>
  f6:	42 30       	cpi	r20, 0x02	; 2
  f8:	51 f0       	breq	.+20     	; 0x10e <MDIO_SETPIN_STATUS+0x90>
  fa:	08 95       	ret
        {
            /*INCASE OF OUTPUT*/
        case OUTPUT:
           MDIO_DDRC|=au8_pin;   /*SETTING THE VALUE OF THE PINS IN DDRA BY 1*/
  fc:	84 b3       	in	r24, 0x14	; 20
  fe:	68 2b       	or	r22, r24
 100:	64 bb       	out	0x14, r22	; 20

           break;
 102:	08 95       	ret

            /*INCASE OF INPUT FLOAT*/
        case INPUT_FLOAT:
            
            MDIO_DDRC &= ~au8_pin;   /*SETTING THE VALUE OF THE PINS IN DDRA BY 0*/
 104:	84 b3       	in	r24, 0x14	; 20
 106:	60 95       	com	r22
 108:	68 23       	and	r22, r24
 10a:	64 bb       	out	0x14, r22	; 20

            break;
 10c:	08 95       	ret
        
            /*INCASE OF INPUT PULLUP*/
        case INPUT_PULLUP:

           MDIO_DDRC &= ~au8_pin;   /*SETTING THE VALUE OF THE PINS IN PINS BY 0*/
 10e:	84 b3       	in	r24, 0x14	; 20
 110:	96 2f       	mov	r25, r22
 112:	90 95       	com	r25
 114:	89 23       	and	r24, r25
 116:	84 bb       	out	0x14, r24	; 20
           
			MDIO_PORTC |= au8_pin;  /*Set the specified pins to 1 in PORT*/
 118:	85 b3       	in	r24, 0x15	; 21
 11a:	68 2b       	or	r22, r24
 11c:	65 bb       	out	0x15, r22	; 21

            break;
 11e:	08 95       	ret
        break;
        /*incase of port D*/
    case PORTD:

        /*GETTING THE STATUS*/
        switch (au8_status)
 120:	41 30       	cpi	r20, 0x01	; 1
 122:	41 f0       	breq	.+16     	; 0x134 <MDIO_SETPIN_STATUS+0xb6>
 124:	18 f0       	brcs	.+6      	; 0x12c <MDIO_SETPIN_STATUS+0xae>
 126:	42 30       	cpi	r20, 0x02	; 2
 128:	51 f0       	breq	.+20     	; 0x13e <MDIO_SETPIN_STATUS+0xc0>
 12a:	08 95       	ret
        {
            /*INCASE OF OUTPUT*/
        case OUTPUT:
           MDIO_DDRD|=au8_pin;   /*SETTING THE VALUE OF THE PINS IN DDRA BY 1*/
 12c:	81 b3       	in	r24, 0x11	; 17
 12e:	68 2b       	or	r22, r24
 130:	61 bb       	out	0x11, r22	; 17

           break;
 132:	08 95       	ret

            /*INCASE OF INPUT FLOAT*/
        case INPUT_FLOAT:
            
            MDIO_DDRD &= ~au8_pin;   /*SETTING THE VALUE OF THE PINS IN DDRA BY 0*/
 134:	81 b3       	in	r24, 0x11	; 17
 136:	60 95       	com	r22
 138:	68 23       	and	r22, r24
 13a:	61 bb       	out	0x11, r22	; 17

            break;
 13c:	08 95       	ret
        
            /*INCASE OF INPUT PULLUP*/
        case INPUT_PULLUP:

            MDIO_DDRD &= ~au8_pin;  /*SETTING THE VALUE OF THE PINS IN PINS BY 0*/
 13e:	81 b3       	in	r24, 0x11	; 17
 140:	96 2f       	mov	r25, r22
 142:	90 95       	com	r25
 144:	89 23       	and	r24, r25
 146:	81 bb       	out	0x11, r24	; 17
           
			MDIO_PORTD |= au8_pin;  /*Set the specified pins to 1 in PORT*/
 148:	82 b3       	in	r24, 0x12	; 18
 14a:	68 2b       	or	r22, r24
 14c:	62 bb       	out	0x12, r22	; 18
 14e:	08 95       	ret

00000150 <PWM_INIT>:
	
}

void PWM_SINGLE_SETUP(u8_t DutyCycle)
{
	OCR0=DutyCycle;							//setting a duty cycle for a single on the ocr0 pin
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	d8 2f       	mov	r29, r24
 156:	c6 2f       	mov	r28, r22
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	68 e0       	ldi	r22, 0x08	; 8
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	0e 94 3f 00 	call	0x7e	; 0x7e <MDIO_SETPIN_STATUS>
 162:	dd 23       	and	r29, r29
 164:	19 f0       	breq	.+6      	; 0x16c <PWM_INIT+0x1c>
 166:	d1 30       	cpi	r29, 0x01	; 1
 168:	59 f0       	breq	.+22     	; 0x180 <PWM_INIT+0x30>
 16a:	13 c0       	rjmp	.+38     	; 0x192 <PWM_INIT+0x42>
 16c:	83 b7       	in	r24, 0x33	; 51
 16e:	80 64       	ori	r24, 0x40	; 64
 170:	83 bf       	out	0x33, r24	; 51
 172:	83 b7       	in	r24, 0x33	; 51
 174:	88 60       	ori	r24, 0x08	; 8
 176:	83 bf       	out	0x33, r24	; 51
 178:	83 b7       	in	r24, 0x33	; 51
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	83 bf       	out	0x33, r24	; 51
 17e:	09 c0       	rjmp	.+18     	; 0x192 <PWM_INIT+0x42>
 180:	83 b7       	in	r24, 0x33	; 51
 182:	8f 7b       	andi	r24, 0xBF	; 191
 184:	83 bf       	out	0x33, r24	; 51
 186:	83 b7       	in	r24, 0x33	; 51
 188:	88 60       	ori	r24, 0x08	; 8
 18a:	83 bf       	out	0x33, r24	; 51
 18c:	83 b7       	in	r24, 0x33	; 51
 18e:	80 63       	ori	r24, 0x30	; 48
 190:	83 bf       	out	0x33, r24	; 51
 192:	83 b7       	in	r24, 0x33	; 51
 194:	c8 2b       	or	r28, r24
 196:	c3 bf       	out	0x33, r28	; 51
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <PWM_dynamics>:
}

void PWM_dynamics(u8_t signal_mode,u8_t DutyCycle)
{
	switch(signal_mode)
 19e:	88 23       	and	r24, r24
 1a0:	79 f0       	breq	.+30     	; 0x1c0 <PWM_dynamics+0x22>
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	89 f0       	breq	.+34     	; 0x1c8 <PWM_dynamics+0x2a>
 1a6:	08 95       	ret
	{
		case incrementation :
		{
			for(u8_t i=0 ; i<=DutyCycle ; i++)
			{
				OCR0=i;
 1a8:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	2f ef       	ldi	r18, 0xFF	; 255
 1ac:	39 e6       	ldi	r19, 0x69	; 105
 1ae:	98 e1       	ldi	r25, 0x18	; 24
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	30 40       	sbci	r19, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <PWM_dynamics+0x12>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <PWM_dynamics+0x1c>
 1ba:	00 00       	nop
{
	switch(signal_mode)
	{
		case incrementation :
		{
			for(u8_t i=0 ; i<=DutyCycle ; i++)
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	01 c0       	rjmp	.+2      	; 0x1c2 <PWM_dynamics+0x24>
	OCR0=DutyCycle;							//setting a duty cycle for a single on the ocr0 pin
}

void PWM_dynamics(u8_t signal_mode,u8_t DutyCycle)
{
	switch(signal_mode)
 1c0:	80 e0       	ldi	r24, 0x00	; 0
	{
		case incrementation :
		{
			for(u8_t i=0 ; i<=DutyCycle ; i++)
 1c2:	68 17       	cp	r22, r24
 1c4:	88 f7       	brcc	.-30     	; 0x1a8 <PWM_dynamics+0xa>
 1c6:	08 95       	ret
		}
		case decrementation :
		{
			for(u8_t i=DutyCycle ; i>=0 ; i--)
			{
				OCR0=i;
 1c8:	6c bf       	out	0x3c, r22	; 60
 1ca:	2f ef       	ldi	r18, 0xFF	; 255
 1cc:	39 e6       	ldi	r19, 0x69	; 105
 1ce:	88 e1       	ldi	r24, 0x18	; 24
 1d0:	21 50       	subi	r18, 0x01	; 1
 1d2:	30 40       	sbci	r19, 0x00	; 0
 1d4:	80 40       	sbci	r24, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <PWM_dynamics+0x32>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <PWM_dynamics+0x3c>
 1da:	00 00       	nop
			}
			break;
		}
		case decrementation :
		{
			for(u8_t i=DutyCycle ; i>=0 ; i--)
 1dc:	61 50       	subi	r22, 0x01	; 1
 1de:	f4 cf       	rjmp	.-24     	; 0x1c8 <PWM_dynamics+0x2a>

000001e0 <_exit>:
 1e0:	f8 94       	cli

000001e2 <__stop_program>:
 1e2:	ff cf       	rjmp	.-2      	; 0x1e2 <__stop_program>
